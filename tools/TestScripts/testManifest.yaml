- name: "First Frame Empty"
  category: "base"
  comment: "Test the first frame of the server is cleared to default clear color"
  shortName: "firstFrame"
  scinthDef: ""
  captureTimes: [ 1 ]
- name: "VSinOsc Bullseye"
  category: "VOsc"
  comment: "VSinOsc frequency as a function of distance from center."
  shortName: "scinOsc"
  scinthDef: "{ VBWOut.pr(VSinOsc.pr(VLength.pr(VNormPos.pr))); }"
  captureTimes: [ 1, 1, 1, 1, 1 ]
- name: "VSaw Checker"
  category: "VOsc"
  comment: "VSaw two color checker pattern."
  shortName: "gingham"
  scinthDef: "{
    var pos = VNormPos.pr;
    VRGBOut.pr(VSaw.pr(1.0, VX.pr(pos)), VSaw.pr(1.5, VY.pr(pos)), VSaw.pr(VX.pr(VNormPos.pr)));
  }"
  captureTimes: [ 1, 1 ]
- name: "Param Colors"
  category: "params"
  comment: "Test default values of parameters and a simple change"
  shortName: "paramColors"
  scinthDef: "{ |r = 0.5, g = 0.1, b = 0.9|
    VRGBOut.pr(r, g, b);
  }"
  captureTimes: [ 1, 1, 1 ]
  parameters:
    - r: 0.1
    - b: 0.1
    - r: 0.8
      g: 0.3
- name: "Param Parabula"
  category: "params"
  comment: "Test parameters on a more complex ScinthDef"
  shortName: "paramParab"
  scinthDef: "{ |scale=2.0, xmod=0.5, ymod=0.5|
    var pos = VNormPos.pr() * scale;
    var sawA = VSaw.pr(0.7, (VX.pr(pos) % xmod) * VY.pr(pos));
    var sawB = VSaw.pr(0.9, VX.pr(pos) * (VY.pr(pos) % ymod));
    VBWOut.pr(sawA * sawB);
  }"
  captureTimes: [ 1, 1, 1 ]
  parameters:
    - xmod: 0.2
    - "none"
    - scale: 3.0
      xmod: 1.0
      ymod: 0.7
- name: "Constant Image"
  category: "images"
  comment: "Test simple image render with constant image"
  shortName: "constImage"
  scinthDef: "{
    var size = VTextureSize.pr(1);
    var aspect = VX.pr(size) / VY.pr(size);
    var pos = VTexPos.pr;
    pos = VVec2.pr((VX.pr(pos) - 0.125) / aspect, VY.pr(pos));
    VSampler.pr(1, pos); }"
  images:
    - file: "molly.png"
      number: 1
  captureTimes: [ 1 ]
- name: "Parameterized Image"
  category: "images"
  comment: "Test simple image render with parameterized image"
  shortName: "paramImage"
  scinthDef: "{ |i|
    var size = VTextureSize.pr(i);
    var aspect = VX.pr(size) / VY.pr(size);
    var pos = VTexPos.pr;
    pos = VVec2.pr((VX.pr(pos) - 0.125) / aspect, VY.pr(pos));
    VSampler.pr(i, pos);
  }"
  images:
    - file: "storm.png"
      number: 1
    - file: "molly.png"
      number: 2
  captureTimes: [ 1, 1, 1, 1 ]
  parameters:
    - "none"
    - i: 1
    - i: 2
    - i: 123
- name: "Sampler with white border"
  category: "images"
  comment: "Test sampler border mode clamp with a white border"
  shortName: "whiteBorder"
  scinthDef: "{ VSampler.pr(1, VTexPos.pr * 3.0).clampBorderColor_('white'); }"
  images:
    - file: "molly.png"
      number: 1
  captureTimes: [ 1 ]
- name: "Sampler with opaque black border"
  category: "images"
  comment: "Test sampler with border mode clamp with an opaque black border"
  shortName: "blackBorder"
  scinthDef: "{ VSampler.pr(1, VTexPos.pr * 3.0).clampBorderColor_('black'); }"
  images:
    - file: "molly.png"
      number: 1
  captureTimes: [ 1 ]
- name: "Sampler with clamp to edge border"
  category: "images"
  comment: "Test sampler with clamp to edge border mode"
  shortName: "edgeBorder"
  scinthDef: "{ VSampler.pr(1, VTexPos.pr * 3.0).addressMode('clampToEdge'); }"
  images:
    - file: "molly.png"
      number: 1
  captureTimes: [ 1 ]
- name: "Sampler with repeat border"
  category: "images"
  comment: "Test sampler with repeat border mode"
  shortName: "repeatBorder"
  scinthDef: "{ VSampler.pr(1, VTexPos.pr * 3.0).addressMode('repeat'); }"
  images:
    - file: "molly.png"
      number: 1
  captureTimes: [ 1 ]
- name: "Sampler with mirrored repeat border"
  category: "images"
  comment: "Test sampler with repeat border mode"
  shortName: "mirrorBorder"
  scinthDef: "{ VSampler.pr(1, VTexPos.pr * 3.0).addressMode('mirroredRepeat'); }"
  images:
    - file: "molly.png"
      number: 1
  captureTimes: [ 1 ]
- name: "Sampler with uniform buffer, constant, and parameterized images"
  category: "images"
  comment: "Test providing all forms of parameters to an Scinth"
  shortName: "complexImage"
  scinthDef: "{ |i = 2|
    var pos = VTexPos.pr;
    var m = VSampler.pr(1, VVec2.pr(VSaw.pr(freq: 0.5, phase: VX.pr(pos)), VSaw.pr(freq: (0.75 / 2.0), phase: VY.pr(pos))));
    var s = VSampler.pr(i, VVec2.pr(VSaw.pr(freq: 2.0, phase: 1.0 - VX.pr(pos)), VSaw.pr(freq: 1.5, phase: 1.0 - VY.pr(pos))) * 2.0);
    s + m;
  }"
  images:
    - file: "molly.png"
      number: 1
    - file: "storm.png"
      number: 2
  captureTimes: [ 1, 1, 1, 1 ]
  parameters:
    - "none"
    - i: 1
    - i: 2
    - i: 123
- name: "Alpha blending with Scinths, white opaque base layer"
  category: "alpha"
  comment: "Test alpha blending colors between different Scinths, starting with a white opaque background."
  shortName: "alphaWhite"
  scinthDef: "{
    VBWOut.pr(1.0);
  }"
  captureTimes: [ 1 ]
  keep: true
- name: "Green layer on top of white"
  category: "alpha"
  comment: "Add in a green alpha-blended offset circle."
  shortName: "alphaGreen"
  scinthDef: "{
    var off = VVec2.pr(-0.3, 0.3);
    var v = VClamp.pr(1.1 - (VLength.pr(VNormPos.pr - off)), 0.0, 1.0);
    VRGBAOut.pr(0, v, 0, v);
  }"
  captureTimes: [ 1 ]
  keep: true
- name: "Red layer on top of white and green"
  category: "alpha"
  comment: "Now add in a red layer. Note that the generated image is order-dependent."
  shortName: "alphaRed"
  scinthDef: "{
    var off = VVec2.pr(0.3, 0.3);
    var v = VClamp.pr(1.1 - (VLength.pr(VNormPos.pr - off)), 0.0, 1.0);
    VRGBAOut.pr(v, 0, 0, v);
  }"
  captureTimes: [ 1 ]
  keep: true
- name: "Blue layer on top of white, green, red"
  category: "alpha"
  comment: "Add in a blue layer to complete the color wheel."
  shortName: "alphaBlue"
  scinthDef: "{
    var off = VVec2.pr(0.0, -1.0 * VLength.pr(0.3, 0.3));
    var v = VClamp.pr(1.1 - (VLength.pr(VNormPos.pr - off)), 0.0, 1.0);
    VRGBAOut.pr(0, 0, v, v);
  }"
  captureTimes: [ 1 ]
  keep: true
- name: "Remove middle red layer first"
  category: "alpha"
  comment: "Test removing Scinths in a different order than they were added."
  shortName: "removeRed"
  captureTimes: [ 1 ]
  free: [ "alphaRed" ]
- name: "Remove white backdrop layer"
  category: "alpha"
  comment: "Test blending Scinths against the default clear color."
  shortName: "removeWhite"
  captureTimes: [ 1 ]
  free: [ "alphaWhite" ]
- name: "Remove green layer"
  category: "alpha"
  comment: "Should now just be the remaining blue layer."
  shortName: "removeGreen"
  captureTimes: [ 1 ]
  free: [ "alphaGreen" ]
- name: "Remove final blue layer"
  category: "alpha"
  comment: "Test removing final Scinth"
  shortName: "removeBlue"
  captureTimes: [ 1 ]
  free: [ "alphaBlue" ]
  assertAllFree: true
- name: "Frame Rate Oscillator"
  category: "frame"
  comment: "Test a global oscillator running in frame rate VGen with parameters and intrinsics"
  shortName: "frOsc"
  scinthDef: "{ |k = 7.0|
    var phaseMul = VSinOsc.fr(freq: 0.3, mul: k, add: 1.0);
    VBWOut.pr(VStep.pr(VSinOsc.pr(freq: 0.1, phase: VLength.pr(VNormPos.pr) * (5 + phaseMul)), 0.5));
  }"
  captureTimes: [ 1, 1, 1, 1 ]
  parameters:
      - "none"
      - k: 10
      - k: 60
      - k: 150
- name: "Frame Rate Aspect Ratio"
  category: "frame"
  comment: "Test a aspect ratio computation at compute time."
  shortName: "aspect"
  scinthDef: "{ |i|
    var size = VTextureSize.fr(i);
    var aspect = VVec2.fr(VY.fr(size) / VX.fr(size), 1.0);
    var colors = VSampler.pr(i, VTexPos.pr * aspect);
    VBWOut.pr(VLength.pr(VVec3.pr(VX.pr(colors), VY.pr(colors), VZ.pr(colors))));
  }"
  images:
    - file: "storm.png"
      number: 1
    - file: "molly.png"
      number: 2
  captureTimes: [ 1, 1, 1, 1 ]
  parameters:
    - "none"
    - i: 1
    - i: 2
    - i: -1
