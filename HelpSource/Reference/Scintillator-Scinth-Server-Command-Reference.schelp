title:: Scintillator Scinth Server Command Reference
summary:: A list of all OSC commands accepted by scscinth
categories:: Quarks>Scintillator>Developer Documentation

section::OSC Communication Details

While the SuperCollider synth programs support a variety of connection modalities and multi-user scenarios, at present scinsynth only supports a single client commnicating exclusively over UDP. For asynchronous messages the server will respond to whatever UDP address and port messages are received from.

In general Scintillator attempts to follow a similar command list and structure to that of the SuperCollider sound synthesis servers, with the addition of a code::/scin_:: prefix to each OSC command and response.

Some commands are marked as strong::asynchronous::, which in this context means they will send a response message back to the sender, sometimes strong::/scin_done::, upon completion of the command. For any command marked as asynchronous Scintillator is designed to always return a message, even if the execution of the command failed or the message body didn't parse.

section::Master Controls

subsection::/scin_quit

Quit program. Exits the scinsynth server.

definitionlist::
## Asynchronous. || Replies to sender with strong::/scin_done:: just before completion.
::

subsection::/scin_status

Query the status. Replies to sender with the following message:

definitionlist::
## /scin_status.reply || table::
## strong::int:: || number of scinths in the render tree.
## strong::int:: || number of groups in the render tree.
## strong::int:: || number of loaded Scinth defintions.
## strong::int:: || number of warnings in log.
## strong::int:: || number of errors in log.
## strong::double:: || approximate graphics memory consumed, in bytes.
## strong::double:: || approximage graphics memory available, in bytes. Some graphics devices don't support this statistic, in which case it will be 0.
## strong::int:: || target frame rate in frames per second (can be -1 or 0)
## strong::double:: || computed mean framerate.
## strong::int:: || number of dropped frames, if running real time, 0 otherwise.
::
::

subsection::/scin_dumpOSC
Log incoming OSC messages.

table::
## strong::int:: || 0 to disable logging. Nonzero to enable.
::

subsection::/scin_sync

Notify when all outstanding aync commands have completed.

Replies with a teletype::/scin_synced:: message when all asynchronous commands received before this one have completed. The reply will contain the sent unique ID.

definitionlist::
## Asynchronous. || Replies to sender with strong::/scin_synced, ID:: when complete.
::


subsection::/scin_logLevel
Set the logging level for the log streams. Lower log levels are inclusive of all higher log levels, so they tend to log more, and the highest log level turns off logging. This overrides any command-line argument supplied to scinsynth at startup.

This command is similar to the SuperCollider server command teletype::/error:: but offers more options for access to the built-in logging.

table::
## strong::int:: || log level
::

The values for the log level are as follows:
table::
## 0 || Trace
## 1 || Debug
## 2 || Informational
## 3 || Warnings
## 4 || Errors
## 5 || Critical Errors
## 6 || Disable Logging
::

subsection::/scin_version

Query the Scintillator version. Replies to sender with the following message:

definitionList::
## /scin_version.reply || table::
## strong::string:: || Program name. Will always be "scinsynth".
## strong::int:: || Scintillator major version number.
## strong::int:: || Scintillator minor version number.
## strong::int:: || Scintillator patch version number.
## strong::string:: || Git branch name.
## strong::string:: || First seven hex digits of the commit hash.
::
::

It is expected that the scinsynth binary will always have the same major, minor, and patch version as the Scintillator Quark.

section::Scinth Definition Commands

subsection::/scin_d_recv

Recive a Scinth definition yaml file.

table::
## strong::string:: || A string of yaml data containing one or more ScinthDef documents.
## strong::bytes:: || optional, an OSC message to execute upon completion.
::

definitionlist::
## Asynchronous. || Replies to sender with strong::/scin_done:: when complete.
::

subsection::/scin_d_load

Load a ScinthDef yaml file from disk.

table::
## strong::string:: || pathname of file to load.
## strong::bytes:: || optional, an OSC message to execute upon completion.
::

definitionlist::
## Asynchronous. || Replies to sender with strong::/scin_done:: when complete.
::

subsection::/scin_d_loadDir

Load a directory of Scinth definitions.

table::
## strong::string:: || directory of *.yaml files to load.
## strong::bytes:: || optional, an OSC message to execute upon completion.
::

definitionlist::
## Asynchronous. || Replies to sender with strong::/scin_done:: when complete.
::

subsection::/scin_d_free

Delete Scinth defenitions. Note that any existing Scinths will continue to run, and the resources associated with this ScinthDef will not be reclaimed until all running Scinth instances built from this ScinthDef are also freed.

table::
## N * strong::string:: || ScinthDef names to free.
::

section::Node Commands

subsection::/scin_n_free

Delete a node.

table::
## N * strong::int:: || node ID
::

Stops a node abruptly, removes it from its group, and frees its memory. More than one nodeID may be specified as additional integer arguments in the message. Note that since Scinths and Groups share the same ID space Groups can also be specified on the list of IDs and they will be deleted. In Scintillator this command has same effect as calling teletype::/scin_g_freeAll::.

subsection::/scin_n_run

Turn node on or off from rendering.

table::
## N* || table::
## strong::int:: || node ID
## strong::int:: || run flag
::
::

list::
## if the run flag is set to zero then the node will not be rendered.
## if the run flag is set to any nonzero value then it will be rendered.
::

Can take pairs of arguments and will apply the run flag to each provided node ID at the same time.

subsection::/scin_n_set

Set a node's control value(s).

table::
## strong::int:: || node ID
## N * || table::
## strong::int:: or strong::string:: || A control index or name
## strong::int:: or strong::float:: || A control value
::
::

section::Scinth Commands

subsection::/scin_s_new

Create a new Scinth.

table::
## strong::string:: || scinth definition name
## strong::int:: || scinth ID
## strong::int:: || add action
## strong::int:: || add target ID
## N * || table::
## strong::int:: or strong::string:: || A control index or name
## strong::int:: or strong::float:: || A control value
::
::

Create a new Scinth instance from the given ScinthDef, give it an ID, and add it to the tree of nodes. There are four ways to add the node to the tree as determined by the add action argument, with the same values as the SuperCollider audio synth server, defined as follows:

definitionlist::
## add actions: || table::
    ## 0 || add the new node to the the head of the group specified by the add target ID.
    ## 1 || add the new node to the the tail of the group specified by the add target ID.
    ## 2 || add the new node just before the node specified by the add target ID.
    ## 3 || add the new node just after the node specified by the add target ID.
    ## 4 || the new node replaces the node specified by the add target ID. The target node is freed.
    ::
::

note::
The SuperCollider Synthesis Server command reference specifies if the provided ID number is -1, the server reserves all negative numbers for IDs, and so will assign a unique negative value to the Synth instance. Scintillator server is similar, but will treat emphasis::any:: negative value as a request for a unique ID to be assigned.
::

section::Group Commands

subsection::/scin_g_clearColor

Sets the background color for the provided group.

TODO

subsection::/scin_g_freeAll

Deletes all nodes in a group.

table::
## N * strong::int:: || group ID(s)
::

Recursively frees all nodes in the groups specified. Note that since Scinths and Groups share the same ID space individual Scinths can also be specified on the list of IDs and they will be deleted. In Scintillator this command has same effect as calling teletype::/scin_n_free::.

section::ImageBuffer Commands

The server leaves designation of unique image buffer numbers to the client. Allocation of an image buffer with a number already associated with another image buffer will result in the prior image buffer being deallocated.

subsection::/scin_ib_allocRead

Decodes an image, optionally resamples it to the provided size, allocates memory on the graphics device, and transfers the decoded image data to the image buffer.

table::
## strong::int:: || buffer number
## strong::string:: || path to image file to decode
## strong::int:: || width of image (can be -1 to respect width of source image)
## strong::int:: || height of image (can be -1 to respect height of source image)
## strong::bytes:: || (optional) an OSC message to execute upon completion
::

If both width and height are provided the source image will be resampled to that size, ignoring aspect ratio. If one of the width or height values is -1 then the image will be resampled to a size respecting the provided dimension and maintaining the aspect ratio of the other dimension. If both values are -1 then the image won't be resampled but will be loaded at original size. For example, for a source image that is 200 pixels wide and 100 pixels tall:

table::
## strong::width requested:: || strong::height requested:: || strong::buffer width:: || strong::buffer height:: || strong::notes::
## 400 || 100 || 400 || 100 || Server will disregard aspect ratio of source image if both requested dimensions are nonnegative.
## -1 || 50 || 100 || 50 || In order to maintain 2:1 aspect ratio server has computed a width of 50 px.
## 400 || -1 || 400 || 200 || In order to maintain 2:1 aspect ratio server has computed a height of 400 px.
## -1 || -1 || 200 || 100 || Server has allocated width and height of source image.
::

definitionlist::
## Asynchronous. || Replies to sender with strong::/scin_done /scin_ib_readImage bufNum:: when complete.
::

subsection::/scin_ib_query

Get ImageBuffer info.

table::
## N * strong::int:: || Image buffer number(s)
::

Responds to the sender with a strong::/scin_ib_info:: message. The arguments to strong::/scin_ib_info:: are as follows:

table::
## N * || table::
## strong::int:: || Image bufer number
## strong::int:: || Image size in bytes, 0 if invalid
## strong::int:: || Image width, -1 if invalid
## strong::int:: || Image height, -1 if invalid
::
::

section::Non Real Time Commands

subsection::/scin_nrt_screenShot

Server will save a screenshot image of the next rendered frame to the supplied file name.

table::
## strong::string:: || file name and path to save the screenshot to.
## strong::string:: || (optional) a mime type of the desired image file, to guide container and codec selection.
::

definitionlist::
## Asynchronous. || Replies to sender twice with updates. The first response is strong::/scin_nrt_screenShot.ready::, followed by the file name, which is sent once the screenshot is ready to record, and lastly a boolean with file status. The second reponse is on completion of the saving of the screenshot file, the server replies with strong::/scin_done:: followed by strong::/scin_nrt_screenShot::, the name of the file saved, and a boolean with status on completion.
::

subsection::/scin_nrt_advanceFrame

If framerate is at zero, renders one frame at the current time and then advances the time by the supplied fractional increment, in seconds.

table::
## strong::int:: || numerator for fractional time advancement
## strong::int:: || denominator for fractional time advancement
::

definitionlist::
## Asynchronous. || Replies to sender with code::[ /scin_done, /scin_nrt_advanceFrame ]::.
::

section::Testing, Debugging and Development Commands

Commands useful for accessing the diagnostic functions or automated validation of scinsynth behavior.

subsection::/scin_echo

Respond back to the caller with the provided message.

table::
## strong::bytes:: || An OSC message to respond to the caller with.
::

definitionlist::
## Asynchronous. || Replies to the sender immediately with the provided message blob.
::

subsection::/scin_logAppend

Add the supplied string to the logs at the supplied level.

table::
## strong::int:: || A log level, from 0-6, to associate with this log entry. See the table in strong::/scin_logLevel:: for the log levels.
## strong::string:: || The string to place in the logs.
::

subsection::/scin_sleepFor

Puts one of the asynchronous worker threads to sleep for the specified number of seconds.

table::
## strong::int:: || The number of seconds to sleep for.
::

note::
This will tie up one of the available threads on the server, and is therefore not recommended for use in a performance or recording context.
::

definitionList::
## Asynchronous. || Replies to the sender on wakeup with strong::/scin_awake::.
::

subsection::/scin_logCrashReports

Prints a complete list of crash reports in the log, at the informational log level (2).

definitionlist::
## Asynchronous. || Replies to sender with code::[ /scin_done, /scin_logCrashReports ]::.
::

subsection:/scin_uploadCrashReport

Mark a specific crash report, or all not uploaded reports, as upload requested.

table::
## strong::string:: || A crash report UUID, or the string "all", in which case all reports will marked for upload.
::

definitionlist::
## Asynchronous. || Replies to sender with code::[ /scin_done, /scin_uploadCrashReport ]::.
::
