title:: Scintillator ScinthDef File Format
summary:: Description of ScinthDef file format used by Scintillator synth server.
categories:: Quarks>Scintillator>Developer Documentation
related:: Classes/VGen, Classes/ScinthDef, Reference/Synth-Definition-File-Format

This is the documentation for the file format used to describe a Video synth, called a ScinthDef, to the Scintillator synth server, scinsynth. The development file format is in YAML, making for easier human readability and debugging. However, despite the difference in format from SuperCollider SynthDef files, the ScinthDef files mostly follow the same structure so should look conceptually familiar. The primary differences are:

list::
## YAML can provide the length of a list of objects and so we omit sizes of lists as separate fields.
## Constants are defined inline, instead of at the header block at the top of the file.
::

section::File Format

subsection::Top-Level Dictionary Spec

A ScinthDef file contains one or more YAML documents. Each document roughly follows the SuperCollider SynthDef structure except for that Constants are not identified verbatim but are rather provided directly in the input spec, in keeping with the desire to allow ScinthDef files to be human-readable, as well as the fact that the shader generation code inside of the synth does not require the constants to be separated out.

table::
## strong::key:: || strong::YAML type:: || strong::notes::
## code::name:: || string || name of the ScinthDef, used as primary means of identification
## code::shape:: || dictionary || A map describing the geometry to render the ScinthDef with
## code::options:: || dictionary || A emphasis::optional:: map describing rendering options for the ScinthDef
## code::parameters:: || list || An emphasis::optional:: key, if the ScinthDef has parameters, will be parameter dictionaries in an ordered list
## code::tweens:: || list || An emphasis::optional:: key, an ordered list of tween dictionaries
## code::vgens:: || list || the VGen YAML dictionaries in an ordered list
::

subsection::Shape Dictionary Spec

The sole required key for the shape dictionary is the code::name:: key, with the rest of the keys being dependent on the specific shape specified. Currently the only supported shape is the Quad, which takes two optional additional keys, code::widthEdges:: and code::heightEdges::. Both have default values of 1 and indicate how many edges the quad should tesselate into.

subsection::Options Dictionary Spec

If ommitted the ScinthDef will use defaults for all values. The pairs of keys and values supported are detailed here. These are the same keys and values supported in the link::Classes/ScinthDef:: code::options:: dictionary.

table::
## strong::key:: || strong::values::
## code::polygonMode:: || table::
## code::fill:: || The default, fills the polygons completely.
## code::line:: || Outlines the polygons only.
## code::point:: || Draws the vertices as points only.
::
::

subsection::Parameter Dictionary Spec

Specifies the parameters that can be modifed by OSC commands such as code::/scin_n_set:: while Scinth instances of this ScinthDef are running.

table::
## strong::key:: || strong::YAML type:: || strong::notes::
## code::name:: || string || Name of the parameter.
## code::defaultValue:: || float || The default value of the parameter.
::

subsection::Tween Dictionary Spec

As Scintillator precomputes tween curves at ScinthDef time and saves them into textures, tweens are specified separately from VGens. This ordered list of dictionary entries allows VGens to specify tween curves as inputs by choosing an index.

table::
## strong::key:: || strong::YAML type:: || strong::notes::
## code::levels:: || list || A list of either individual float elements or sublists of 1, 2, or 4 float elements, describing tween targets.
## code::durations:: || list || A list of individual float elements, of the same length as levels less 1, giving durations of segments in seconds.
## code::curves:: || int or list || Determines the shape of the envelope segments. If one string is provided all segments are assigned that shape, or can be a list of the same length as durations that specifies individual shapes for each segment. For the list of currently supported shapes see the link::Classes/ScinTween:: documentation.
## code::sampleRate:: || float || Specified as samples per second, controls how often the entire tweening function should be sampled
## code::dimension:: || int || A number, either 1, 2, or 4, describing the dimension of the level values
## code::loop:: || boolean || On optional key, default false. If present describes if the tween should loop on its values.
::

subsection::VGen Dictionary Spec

Individual VGens are specified as YAML dictionaries and have the following keys:

table::
## strong::key:: || strong::YAML type:: || strong::notes::
## code::className:: || string || name of the VGen class, must match the name of a VGen configured on the server
## code::rate:: || string || one of code::frame::, code::shape::, or code::pixel::
## code::sampler:: || dictionary || Only required for sampling VGens. Specifies sampler parameters.
## code::tween:: || dictionary || Only present when a Tween input is present, specifies the index of the Tween to use.
## code::inputs:: || list || input YAML dictionaries in an ordered list. May be absent if VGen has no inputs.
## code::outputs:: || list || output YAML dictionaries in an ordered list
::

subsection::VGen Sampler Dictionary Spec

Sampling VGens must include the sampler dictionary, which contains configuration data for the image sampler. For more details see the documentation on link::Classes/VSampler:: parameters.

table::
## strong::key:: || strong::YAML type:: || strong::notes::
## code::image:: || integer || Depending on code::imageArgType::, either an image buffer number or the index of the parameter expected to contain the image buffer number.
## code::imageArgType:: || string || Either code::constant::, in which case code::image:: must be a valid image buffer number, or code::parameter::, in which case code::image:: must be a valid parameter index.
## code::minFilterMode:: || string || emphasis::Optional.:: Either code::linear:: or code::nearest::. Default is code::linear::.
## code::magFilterMode:: || string || emphasis::Optional.:: Either code::linear:: or code::nearest::. Default is code::linear::.
## code::enableAnisotropicFiltering:: || boolean || emphasis::Optional::. Default is code::true::.
## code::addressModeU:: || string || emphasis::Optional.:: One of code::repeat::, code::mirroredRepeat::, code::clampToEdge::, or code::clampToBorder::. Default is code::clampToBorder::.
## code::addressModeV:: || string || emphasis::Optional.:: One of code::repeat::, code::mirroredRepeat::, code::clampToEdge::, or code::clampToBorder::. Default is code::clampToBorder::.
## code::clampBorderColor:: || string || emphasis::Optional.:: Ignored unless code::addressMode:: is code::clampToBorder::, in which case it is one of code::transparentBlack::, code::black::, or code::white::. Default is code::transparentBlack::.
::

subsection::Tween

A VGen that requires a bound Tween for sampling should specify the tween index of the VGen to bind using the code::tween:: dictionary.

table::
## strong::key:: || strong::YAML type:: || strong::notes::
## code::index:: || integer || The index of specific Tween in the ScinthDef code::tweens:: table to use.
::

subsection::VGen Input Dictionary Spec

Inputs to VGens are polymorphic, and takes on a different structure depending on what kind of input is specified in the code::type:: field. All input dictionaries supply the code::type:: key as well as an optional code::name:: field:

table::
## strong::key:: || strong::YAML type:: || strong::notes::
## code::name:: || string || An emphasis::optional:: string, provided for readability
## code::dimension:: || integer || The dimensionality of the input
## code::type:: || string || An enumerated type, for possible values see below
::

The rest of the keys in the Input dictionary are a function of type and are detailed here:

table::
## strong::type:: || strong::format::
## code::vgen:: ||
table::
## strong::key:: || strong::YAML type:: || strong::notes::
## code::vgenIndex:: || int || The index of the VGen providing output to this input
## code::outputIndex:: || int || The output index on that VGen
::
## code::constant:: ||
table::
## strong::key:: || strong::YAML type:: || strong::notes::
## code::value:: || float || All constants will be treated as floating point numbers
::
## code::parameter:: ||
table::
## strong::key:: || strong::YAML type:: || strong::notes::
## code::index:: || int || The parameter index to use.
::
::

subsection::VGen Output Dictionary Spec

Output entries specify dimensions on each output.

table::
## strong::key:: || strong::YAML type:: || strong::notes::
## code::dimension:: || integer || The dimension of this output.
::

section::Example

We execute the following code:

code::
(
~k = ScinthDef.new(\foo, {
	BWOut.pr(VSinOsc.pr(200.0, 0.0, 0.9, 0.2));
});
~k.asYAML.postln;
)
::

And ScinthDef produces the following:

code::
name: foo
shape:
    name: Quad
    widthEdges: 1
    heightEdges: 1
vgens:
    - className: VSinOsc
      rate: pixel
      inputs:
        - type: constant
          dimension: 1
          value: 200.0
        - type: constant
          dimension: 1
          value: 0.0
        - type: constant
          dimension: 1
          value: 0.9
        - type: constant
          dimension: 1
          value: 0.2
      outputs:
        - dimension: 1
    - className: BWOut
      rate: pixel
      inputs:
        - type: vgen
          vgenIndex: 0
          outputIndex: 0
          dimension: 1
      outputs:
        - dimension: 4
::
