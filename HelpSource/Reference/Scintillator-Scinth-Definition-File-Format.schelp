title:: Scintillator Scinth Definition File Format
summary:: Description of Scinth Definition file format used by Scintillator synth server.
categories:: Quarks>Scintillator
related:: Classes/VGen, Classes/ScinthDef, Reference/Synth-Definition-File-Format

This is the documentation for the file format used to describe a Video synth, called a ScinthDef, to the Scintillator synth server, scinsynth. The development file format is in YAML, making for easier human readability and debugging. However, despite the difference in format from SuperCollider SynthDef files, the ScinthDef files mostly follow the same structure so should look conceptually familiar. The primary differences are:

list::
## YAML can provide the length of a list of objects and so we omit sizes of lists as separate fields.
## Constants are defined inline, instead of at the header block at the top of the file.
::

section::File Format

subsection::Top-Level Dictionary Spec

A ScinthDef file contains one or more YAML documents. Each document roughly follows the SuperCollider SynthDef structure except for that Constants are not identified verbatim but are rather provided directly in the input spec, in keeping with the desire to allow ScinthDef files to be human-readable, as well as the fact that the shader generation code inside of the synth does not require the constants to be separated out.

table::
## strong::key:: || strong::YAML type:: || strong::notes::
## code::name:: || string || name of the ScinthDef, used as primary means of identification
## code::parameters:: || list || empty for now, and ignored
## code::vgens:: || list || the VGen YAML dictionaries in an ordered list
::

subsection::VGen Dictionary Spec

Individual VGens are specified as YAML dictionaries and have the following keys:

table::
## strong::key:: || strong::YAML type:: || strong::notes::
## code::className:: || string || name of the VGen class, must match the name of a VGen configured on the server
## code::rate:: || string || currently either code::fragment:: or code::vertex::
## code::inputs:: || list || input YAML dictionaries in an ordered list. May be absent if VGen has no inputs.
## code::outputs:: || list || output YAML dictionaries in an ordered list
::

subsection::VGen Input Dictionary Spec

Inputs to VGens are polymorphic, and takes on a different structure depending on what kind of input is specified in the code::type:: field. All input dictionaries supply the code::type:: key as well as an optional code::name:: field:

table::
## strong::key:: || strong::YAML type:: || strong::notes::
## code::name:: || string || An emphasis::optional:: string, provided for readability
## code::type:: || string || An enumerated type, for possible values see below
::

The rest of the keys in the Input dictionary are a function of type and are detailed here:

table::
## strong::type:: || strong::format::
## code::vgen:: ||
table::
## strong::key:: || strong::YAML type:: || strong::notes::
## code::vgenIndex:: || int || The index of the VGen providing output to this input
## code::outputIndex:: || int || The output index on that VGen
::
## code::constant:: ||
table::
## strong::key:: || strong::YAML type:: || strong::notes::
## code::value:: || float || All constants will be treated as floating point numbers
::
## code::intrinsic:: ||
table::
## strong::key:: || strong::YAML type:: || strong::notes::
## code::which:: || string || One of code::x_pos:: or the other predefined intrinsics (see link::Classes/ScinIntrinsic:: for details)
::
::

note::
Intrinsics right now are being treated like normal VGens.
::

subsection::VGen Output Dictionary Spec

Outputs from VGens typically only specify output rates.

note::
For the moment since all rates are assumed to be fragment rate, and all VGens are thought to be single-output, this section is omitted.
::

table::
## strong::key:: || strong::YAML type:: || strong::notes::
## code::rate:: || One of code::fragment:: or code::vertex::
::

section::Example

We execute the following code:

code::
(
~k = ScinthDef.new(\foo, {
	VOut.fg(0, ScinOsc.fg(200.0, 0.0, 0.9, 0.2));
});
~k.asYAML.postln;
)
::

And ScinthDef produces the following:

code::
- name: foo
  vgens:
    - className: ScinOsc
      rate: fragment
      inputs:
        - type: constant
          value: 200.0
        - type: constant
          value: 0.0
        - type: constant
          value: 0.9
        - type: constant
          value: 0.2
    - className: VOut
      rate: fragment
      inputs:
        - type: constant
          value: 0
        - type: vgen
          vgenIndex: 0
          outputIndex: 0
::