TITLE:: ScinServer
summary:: Represents a Scintillator server application.
categories:: Quarks>Scintillator
related:: Classes/ScinServerOptions

DESCRIPTION::
This class is analagous to the SuperCollider link::Classes/Server:: class. It is a client-side representation of an instance of the Scintillator video synthesis server.

CLASSMETHODS::

METHOD:: default
Get or set the default Scintillator server. This is the server reference that will be used as the default in all server arguments to ScinthDef and others that accept an optional server argument. By default is the local server instance.

METHOD:: new
Creates a new ScinServer instance. For now only local servers are supported.

ARGUMENT:: options
An optional instance of link::ScinServerOptions::. If code::nil::, an instance of ScinServerOptions will be created using the default values.

INSTANCEMETHODS::
private::init

METHOD:: boot
It not already booted, boots the Scintillator synthesis server.

METHOD:: numberOfWarnings
Returns the current number of errors reported by the server since boot.

METHOD:: numberOfErrors
Returns the current number of errors reported by the server since boot.

METHOD:: logLevel
Updates the logging level on the server to the provided argument. Lower log levels are inclusive of all higher log levels, so they tend to log more, and the highest log level turns off logging. This overrides any command-line argument supplied to scinsynth at startup.

ARGUMENT:: level

The values for the log level are as follows:
table::
## 0 || Trace
## 1 || Debug
## 2 || Informational
## 3 || Warnings
## 4 || Errors
## 5 || Critical Errors
## 6 || Disable Logging
::

METHOD:: screenShot
Requests the server to take a screen shot of the next frame rendered, encode it into the provided file format, and save to disk.

ARGUMENT:: fileName
A string with the full path and file name, including extension, of the desired file to save the screenshot image to.

ARGUMENT:: mimeType
An optional string. A hint to the image encoder as to which file format is desired, for example code::"image/png"::, code::"image/gif"::, code::"image/jpeg"::.

ARGUMENT:: onReady
An optional function to call when the ScinServer responds that it has enqueued the screenshot for encode on the next rendered frame.

ARGUMENT:: onComplete
An optional function to call when the ScinServer responds that it has completed encoding and writing the image to disc.

note::
The screenShot functionality is only supported in non-realtime rendering modes. See link::Guides/ScinServer-Recording:: for more information.
::

METHOD:: advanceFrame
If the server is configured with zero frame rate, will advance the time on the synth by the provided fraction of time in seconds and render a new frame. Otherwise this command is ignored.

ARGUMENT:: num
An integer representing the numerator in the fraction of time to advance the frame by.

ARGUMENT:: denom
An integer representing the denominator in the fraction of time to advance the frame by. Sending time in terms of fractions allows for traditional media frame rates (like 24 frames per second).

METHOD:: bootSync
(describe method here)

ARGUMENT:: condition
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: dumpOSC
(describe method here)

ARGUMENT:: on
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: sendMsg
(describe method here)

ARGUMENT::  ... msg
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: serverBooting
(describe method here)

returns:: (describe returnvalue here)

METHOD:: quit
(describe method here)

returns:: (describe returnvalue here)

METHOD:: doWhenBooted
(describe method here)

ARGUMENT:: onComplete
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: serverRunning
(describe method here)

returns:: (describe returnvalue here)

METHOD:: waitForBoot
(describe method here)

ARGUMENT:: onComplete
(describe argument here)

returns:: (describe returnvalue here)

subsection:: Asynchronous Commands

The server provides support for waiting on the completion of asynchronous OSC-commands such as reading or writing sound files.

note::
The following methods must be called from within a running link::Classes/Routine::. Explicitly passing in a link::Classes/Condition:: allows multiple elements to depend on different conditions. The examples below should make clear how all this works.
::

METHOD:: sync
(describe method here)

ARGUMENT:: condition
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: queueScreenShotSync
Call from a link::Classes/Routine::. Requests the server take a screenshot and blocks the calling thread until the screenshot is complete.

ARGUMENT:: fileName
(describe argument here)

ARGUMENT:: mimeType
(describe argument here)

ARGUMENT:: onComplete
(describe argument here)

ARGUMENT:: condition
(describe argument here)

returns:: (describe returnvalue here)


EXAMPLES::

code::
(some example code)
::
