TITLE:: Distance
summary:: Computes the distance between two vectors
categories:: Quarks>Scintillator>VGens>Mathematics>Vector Math
related:: Classes/Length

DESCRIPTION::
Distance computes the distance between two vectors by calculating the length of their difference. It works on input dimensions 1-4.

CLASSMETHODS::

METHOD:: fr

strong::dimensions::
table::
## strong::input:: || strong::output::
## 1, 1 || 1
## 2, 2 || 1
## 3, 3 || 1
## 4, 4 || 1
::

ARGUMENT:: x
First vector input for distance computation.

ARGUMENT:: y
Second vector input for distance computation.

INSTANCEMETHODS::
private::inputDimensions, outputDimensions

EXAMPLES::

code::
(
// This example uses the Distance operator to plot the distance at each pixel to the
// moving point on three different Lissajous curves, one in each color channel.
// The dot parameter controls the size of the dot around each curve, by scaling how
// quickly the dot will drive the length to the clamp values as distance from each
// Lissajous point increases.
~k = ScinthDef.new(\k, { |dot = 0.5|
	var rx = VSinOsc.fr(freq: 1.5, mul: 0.9, add: 0.0);
	var ry = VSinOsc.fr(freq: 1, phase: pi / 4, mul: 0.9, add: 0.0);
	var gx = VSinOsc.fr(freq: 0.5, phase: pi / 2, mul: 0.9, add: 0.0);
	var gy = VSinOsc.fr(freq: 1.25, mul: 1.0, add: 0.0);
	var bx = VSinOsc.fr(freq: 0.75, phase: pi / 3, mul: 0.9, add: 0.0);
	var by = VSinOsc.fr(phase: 3 * pi / 4, mul: 0.9, add: 0.0);
	var pos = NormPos.fr;
	var r = Clamp.fr(1.0 - (Distance.fr(Vec2.fr(rx, ry), pos) / dot), 0.0, 1.0);
	var g = Clamp.fr(1.0 - (Distance.fr(Vec2.fr(gx, gy), pos) / dot), 0.0, 1.0);
	var b = Clamp.fr(1.0 - (Distance.fr(Vec2.fr(bx, by), pos) / dot), 0.0, 1.0);
	RGBOut.fr(r, g, b);
}).add;
)

(
~t = Scinth.new(\k);
)
::

image::Distance.png::