TITLE:: VMix
summary:: Piecewise vector blending VGen
categories:: Quarks>Scintillator>VGens>Mathematics>Signal Processing
related:: Classes/VClamp, Classes/VStep


DESCRIPTION::
Similar to the binary operator code::blend::, returns a linear mix of code::u, v:: with code::a:: between code::[0, 1]::. Supports piecewise blend or a single blend argument to apply to all components

strong::Supported Rates: frame, shape, pixel::

CLASSMETHODS::

METHOD:: fr
METHOD:: sr
METHOD:: pr

Make a VMix VGen at requested rate.

ARGUMENT:: u
The first vector input to blend.

ARGUMENT:: v
The second vector input to blend.

ARGUMENT:: a
The blend factor. If a is a vector then each component of a will be used as the blend factor for the corresponding components in u and v. If a is a single number then it will apply that blend factor to all components of u and v.

returns::
If 0, returns u. If 1 returns v. Generally returns code::(u * (1 - a)) + (v * a)::

strong::Dimensions::
table::
## strong::input:: || strong::output::
## 1, 1, 1 || 1
## 2, 2, 1 || 2
## 2, 2, 2 || 2
## 3, 3, 1 || 3
## 3, 3, 3 || 3
## 4, 4, 1 || 4
## 4, 4, 4 || 4
::

INSTANCEMETHODS::
private:: inputDimensions, outputDimensions

EXAMPLES::

code::
// Vector mix demo shows blending of two textures from left to right. On the left
// the x component of the texture position is zero, so VX.pr(VTexPos.pr) = 0.
// On the right it is 1. So on the left the VMix will return entirely the colors
// from the image of Molly on the couch, and on the right the colors come entirely
// from the image of Storm on the kitchen floor.
(
~v = ScinServer.new;
~v.options.width = 400;
~v.options.height = 300;
~v.boot;
)

(
~molly = ScinImageBuffer.read(path: "~/src/TestGoldImages/sourceMedia/molly.png".standardizePath);
~storm = ScinImageBuffer.read(path: "~/src/TestGoldImages/sourceMedia/storm.png".standardizePath);
)

(
~f = ScinthDef.new(\mix, {
	var m = VSampler.pr(~molly, VTexPos.pr);
	var s = VSampler.pr(~storm, VTexPos.pr);
	VMix.pr(m, s, VX.pr(VTexPos.pr));
}).add;
)

(
~t = Scinth.new(\mix);
)
::

image::VMix.png::
