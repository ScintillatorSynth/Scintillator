TITLE:: ScinServerOptions
summary:: Encapsulates command line and other options for the Scintillator synthesis server.
categories:: Quarks>Scintillator>Scintillator Server
related:: Classes/ScinServer

DESCRIPTION::
This class is intended to be analogous to the link::Classes/ServerOptions:: class used to boot the SuperCollider audio synthesis server. Like that object, every link::Classes/ScinServer:: has an instance of ScinServerOptions created for it if one is not provided to it by the code::options:: argument on link::Classes/ScinServer:: creation.

Also like link::Classes/ServerOptions::, these parameters are translated into command line arguments for the server boot, so changing the options after the server has booted will take no effect until the server is restarted.

CLASSMETHODS::
private::initClass

METHOD:: new
Creates a new ScinServerOptions instance with all default options.

INSTANCEMETHODS::
private::init

subsection::Server Boot Options

METHOD:: portNumber
An integer, default strong::5511::. ScinServer binds both TCP and UDP ports at the provided port number.

METHOD:: dumpOSC
A boolean, default strong::false::. If true, ScinServer will log all received OSC message at the informational log level. This can also be changed at runtime with the ScinServer code::dumpOSC:: method.

METHOD:: createWindow
A boolean, default strong::true::. If true, ScinServer will create a window onscreen for rendering. If false, it will not, and all rendering will occur offscreen.

METHOD:: swiftshader
A boolean, default strong::false::. If true, ScinServer will ignore any installed graphics hardware and instead will use the open-source software renderer SwiftShader.

METHOD:: frameRate
An integer, default strong::-1::. If a negative number, the server will run in emphasis::interactive:: mode, optimized to reduce latency from render to presentation. If zero the server will run in emphasis::snapshot:: mode, and will only render a new frame when instructed by an code::advanceFrame:: call. If a positive number the server will run in emphasis::throughput:: mode, will render frames as quickly as possible, updated the onscreen window (if present) at the provided refresh rate. For more information see link::Guides/ScinServer-Recording::

METHOD:: logLevel
An integer, default strong::3::. Sets the initial logging level of the server.  The values range from most verbose at 0 to disabling logging entirely at 6. All level values are inclusive of the higher-level values, meaning that 0 will include all higher levels, and 5 will only show cirtical errors. The values for the log level are as follows:

table::
## 0 || Trace
## 1 || Debug
## 2 || Informational
## 3 || Warnings
## 4 || Errors
## 5 || Critical Errors
## 6 || Disable Logging
::


METHOD:: deviceName
A string, default strong::empty::. If empty, this argument is ignored. If non-empty, the server will attempt to match the fragment of the name in the argument against the names of the available devices and choose the first matching device name it encounters, or exit if no match can be made. The synth logs on startup at the Informational level all the Vulkan-supported devices available on the computer it is running on, so the log can be consulted as a source to pick names from. For example this code boots the server with the right log level to see the supported devices:

code::
(
var options = ScinServerOptions.new;
options.logLevel = 2;
~v = ScinServer.new(options).boot;
)
::

Which on my laptop produces in the log stream (among other things) the following console log entry:

teletype::
[1586121895.197] 9593357 [info] found 3 Vulkan devices:
  name: AMD Radeon Pro 5500M, type: Discrete GPU, vendorID: 1002, deviceID: 7340
  name: Intel(R) UHD Graphics 630, type: Integrated GPU, vendorID: 8086, deviceID: 3e9b
  name: SwiftShader Device (LLVM 7.0.0), type: CPU, vendorID: 1ae0, deviceID: c0de

[1586121895.197] 9593357 [info] Choosing fastest device class Discrete GPU, device AMD Radeon Pro 5500M
::

From a performance standpoint Discrete GPUs are typically faster than Integrated GPUs, which are typically much faster than CPU (or software) renderers, and by default the server will pick the highest-performing device by category, so in this case the teletype::AMD Radeon Pro 5500M::, but if I wanted ensure that the Intel integrated GPU got picked I could provide the (note: case-sensitive) following string in options:

code::
(
var options = ScinServerOptions.new;
options.logLevel = 2;
options.deviceName = "Intel";
~v = ScinServer.new(options).boot;
)
::

Which when run produces the following logstream:

teletype::
[1586122278.866] 9595542 [info] Device name Intel match, selecting Intel(R) UHD Graphics 630
::

METHOD:: width
An integer, default strong::800::. The width of the window (or framebuffer, in the case of offscreen rendering) to create in pixels.

METHOD:: height
An integer, default strong::600::. The height of the window (or framebuffer, in the case of offscreen rendering) to create in pixels.

METHOD:: alwaysOnTop
A boolean, default strong::true::. Just like the link::Classes/Window:: method of the same name, if true the server will create a window that floats on top of other windows. If false, the window will allow other windows to layer on top of it. If code::createWindow:: is false this value is ignored.

subsection::Other Methods

METHOD:: asOptionsString
Returns a string reflecting the current options and which can be passed to the command line of the ScinServer binary on boot. Used primarily by ScinServer code on server boot.

METHOD:: quarkPath
A convenience method that exposes the path to the Scintillator Quark. Used primarily by the Scintillator integration test suite and other internal tooling to quickly locate the Scintillator project files.

METHOD:: onServerError
A function, default strong::empty::. This function will be called if the ScinServer object detects an abnormal server exit code.
