TITLE:: VBWOut
summary:: Opaque black and white output VGen
categories:: Quarks>Scintillator>VGens>Vector Manipulation>Color Output
related:: Classes/VRGBAOut, Classes/VRGBOut

DESCRIPTION::
Provides a single value for all three color channels, resulting in a black-and-white, opaque color output signal.

strong::Supported Rates: pixel::

CLASSMETHODS::

METHOD:: pr

Make a VBWOut VGen at requested rate.

ARGUMENT:: value
The black and white value, with 0.0 representing black and 1.0 representing white.

returns::
The vector code::VVec4.pr(value, value, value, 1.0)::

strong::dimensions::
table::
## strong::input:: || strong::output::
## 1 || 4
::

INSTANCEMETHODS::
private::inputDimensions, outputDimensions

EXAMPLES::

code::
(
~blades = ScinthDef.new(\blades, { |scale=2.0, xmod=0.5, ymod=0.5|
	var pos = VNormPos.pr() * scale;
	var sawA = VSaw.pr(0.7, (VX.pr(pos) % xmod) * VY.pr(pos));
	var sawB = VSaw.pr(0.9, VX.pr(pos) * (VY.pr(pos) % ymod));
	VBWOut.pr(sawA * sawB);
}).add;
)
(
~k = Scinth.new(\blades);
)
::

image::VBWOut.png::

code::
(
~molly = ScinImageBuffer.read(path: "~/src/TestGoldImages/sourceMedia/molly.png".standardizePath);
)

(
~bwMolly = ScinthDef.new(\bwMolly, {
	var size = VTextureSize.fr(~molly);
	var aspect = VVec2.fr(VY.fr(size) / VX.fr(size), 1.0);
	var colors = VSampler.pr(~molly, VTexPos.pr * aspect);
	VBWOut.pr(VLength.pr(VVec3.pr(VX.pr(colors), VY.pr(colors), VZ.pr(colors))));
}).add;
)

(
~t = Scinth.new(\bwMolly);
)
::

image::VBWMolly.png::
