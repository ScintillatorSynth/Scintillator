title:: VGens Overview
summary:: A list of the available VGens within Scintillator.
categories:: Quarks>Scintillator>Guides
related:: Classes/VGen, Classes/ScinthDef, Guides/Scintillator-Parallel-Classes

section::Video Oscillators

There are only a few test oscillators implemented for now, with plans to add many more. One key conceptual difference between SuperCollider audio oscillators and Scintillator video oscillators to bear in mind is that video signals are constrained to values between code::[0, 1]::, unlike audio signals, which operate normally between code::[-1, 1]::.

table::
## strong::VGen:: || strong::Rates:: || strong::Dimensions:: || strong::Description::
## link::Classes/VSinOsc::code::.fr(freq, phas, mul, add):: || frame, shape, pixel || table::
## strong::input:: || strong::output::
## 1, 1, 1, 1 || 1
## 2, 2, 2, 2 || 2
## 3, 3, 3, 3 || 3
## 4, 4, 4, 4 || 4
:: || Piecewise sinusodal oscillator, analogous to link::Classes/SinOsc::

## link::Classes/VSaw::code::.fr(freq, phas, mul, add):: || frame, shape, pixel || table::
## strong::input:: || strong::output::
## 1, 1, 1, 1 || 1
## 2, 2, 2, 2 || 2
## 3, 3, 3, 3 || 3
## 4, 4, 4, 4 || 4
:: || Piecewise sawtooth oscillator, analogous to link::Classes/LFSaw::
::

section::Image Sampling

VGens for reading from link::Classes/ScinImageBuffer:: objects.

table::
## strong::VGen:: || strong::Rates:: || strong::Dimensions:: || strong::Description::
## link::Classes/VSampler::code::.pr(image, pos):: || frame, shape, pixel || table::
## strong::input:: || strong::output::
## image, 2 || 4
:: || Samples the provided imageBuffer at code::pos:: and returns the 4D color signal as code::(red, green, blue, alpha)::

## link::Classes/VTexPos::code::.fr():: || shape, pixel || table::
## strong::input:: || strong::output::
## - || 2
:: || Texture Sampler position

## link::Classes/VTextureSize::code::.fr(image):: || frame, shape, pixel || table::
## strong::input:: || strong::output::
## - || 2
:: || Returns the dimensions in pixels of the provided ScinImageBuffer. Roughly analogous to link::Classes/BufFrames::.
::

section::Fragment Position

Scintillator offers a few different means to determine the position of the current fragment shader relative to the geometry being rendered, or the onscreen pixel dimensions. The link::Classes/VTexPos:: VGen is in the Image Sampling section.

table::
## strong::VGen:: || strong::Rates:: || strong::Dimensions:: || strong::Description::
## link::Classes/VNormPos::code::.pr():: || shape, pixel || table::
## strong::input:: || strong::output::
## - || 2
:: || Normalized fragment position

## link::Classes/VTexPos::code::.pr():: || shape, pixel || table::
## strong::input:: || strong::output::
## - || 2
:: || Texture Sampler position

## link::Classes/VFragCoord::code::.pr():: || pixel || table::
## strong::input:: || strong::output::
## - || 2
:: || Onscreen coordinates of current fragment in pixels
::

section::Vector Manipulation

These utility VGens allow the grouping of one-dimensional elements into vectors, access to individual elements within vectors, and lastly a convenience function to repeat (or emphasis::splat::) a single element across all elements within a vector.

subsection::Vector Building

Some VGens require inputs that are higher-dimensional vectors. To construct those inputs from single-dimensional components, Scintillator provides the code::VecN:: classes.

table::
## strong::VGen:: || strong::Rates:: || strong::Dimensions:: || strong::Description::
## link::Classes/VVec2::code::.fr(x, y):: || frame, shape, pixel || table::
## strong::input:: || strong::output::
## 1, 1 || 2
:: || Construct a 2D vector from individual elements code::x:: and code::y::

## link::Classes/VVec3::code::.fr(x, y, z):: || frame, shape, pixel || table::
## strong::input:: || strong::output::
## 1, 1, 1 || 3
:: || Construct a 3D vector from individual elements code::x:: and code::y::

## link::Classes/VVec4::code::.fr(x, y, z, w):: || frame, shape, pixel || table::
## strong::input:: || strong::output::
## 1, 1, 1, 1 || 4
:: || Construct a 4D vector from individual elements code::x:: and code::y::

## link::Classes/VSplat2::code::.fr(x):: || frame, shape, pixel || table::
## strong::input:: || strong::output::
## 1 || 2
:: || Construct a 2D vector from a single element copied into both

## link::Classes/VSplat3::code::.fr(x):: || frame, shape, pixel || table::
## strong::input:: || strong::output::
## 1 || 3
:: || Construct a 3D vector from a single element copied into both

## link::Classes/VSplat4::code::.fr(x):: || frame, shape, pixel || table::
## strong::input:: || strong::output::
## 1 || 4
:: || Construct a 4D vector from a single element copied into both
::

subsection::Element Access

To break out a single-dimensional signal from a higher-dimensional vector, use the code::VX:: and related classes. These follow the computer graphics naming conventions for elements within the vector, where the names emphasis::x, y, z, w:: are used to indicate the first through fourth element respectively.

table::
## strong::VGen:: || strong::Rates:: || strong::Dimensions:: || strong::Description::
## link::Classes/VX::code::.fr(v):: || frame, shape, pixel || table::
## strong::input:: || strong::output::
## 1 || 1
## 2 || 1
## 3 || 1
## 4 || 1
:: || Return the first element in the vector.

## link::Classes/VY::code::.fr(v):: || frame, shape, pixel || table::
## strong::input:: || strong::output::
## 2 || 1
## 3 || 1
## 4 || 1
:: || Return the second element in the vector.

## link::Classes/VZ::code::.fr(v):: || frame, shape, pixel || table::
## strong::input:: || strong::output::
## 3 || 1
## 4 || 1
:: || Return the third element in the vector.

## link::Classes/VW::code::.fr(v):: || frame, shape, pixel || table::
## strong::input:: || strong::output::
## 4 || 1
:: || Return the fourth element in the vector.
::

subsection::Color Output

Note that any vec4 output is considered valid link::Classes/ScinthDef:: output, but these can help with code clarity or with grouping of single-channel inputs into a vec4, sometimes with that fourth alpha component hard-coded to 1.0. In the future the server may perform opacity calling, so knowing an output is entirely opaque will allow VRGBOut and VBWOut to take advantage of that culling automatically.

table::
## strong::VGen:: || strong::Rates:: || strong::Dimensions:: || strong::Description::
## link::Classes/VRGBOut::code::.pr(red, green, blue):: || pixel || table::
## strong::input:: || strong::output::
## 1, 1, 1 || 4
:: || Convenience object for color output at full opacity

## link::Classes/VRGBAOut::code::.pr(red, green, blue, alpha):: || pixel || table::
## strong::input:: || strong::output::
## 1, 1, 1, 1 || 4
:: || Convenience object for color output with alpha channel

## link::Classes/VBWOut::code::.pr(value):: || pixel || table::
## strong::input:: || strong::output::
## 1 || 4
:: || Convenience object for black and white output at full opacity
::

section::Mathematical Operations

Scintillator offers per-element (or emphasis::piecewise::) operations as well as some more traditional vector mathematical operations such as dot and cross products. Many unary and binary operations are offerred with the same names as their analog counterparts,

subsection::Vector Operations

table::
## strong::VGen:: || strong::Rates:: || strong::Dimensions:: || strong::Description::
## link::Classes/VClamp::code::.pr(v, min, max):: || frame, shape, pixel || table::
## strong::input:: || strong::output::
## 1, 1, 1 || 1
## 2, 2, 2 || 2
## 3, 3, 3 || 3
## 4, 4, 4 || 4
:: || Video equivalent of link::Classes/Clip:: UGen, piecewise bounds input code::v:: between code::[min, max]::

## link::Classes/VLength::code::.pr(v):: || frame, shape, pixel || table::
## strong::input:: || strong::output::
## 1 || 1
## 2 || 1
## 3 || 1
## 4 || 1
:: || Returns the length of the vector code::x::, or the square root of the sum of the squares

## link::Classes/VDistance::code::.pr(u, v):: || frame, shape, pixel || table::
## 1, 1 || 1
## 2, 2 || 1
## 3, 3 || 1
## 4, 4 || 1
:: || Computes the distance between code::u:: and code::v::, which is the length of the vector code::v - u::

## link::Classes/VStep::code::.pr(step, x):: || frame, shape, pixel || table::
## strong::input:: || strong::output::
## 1, 1 || 1
## 2, 2 || 2
## 3, 3 || 3
## 4, 4 || 4
:: || Just like the binary operator code::thresh::, returns code::0:: when code::x < step::, otherwise code::x::

## link::Classes/VMix::code::.pr(v, u, a):: || frame, shape, pixel || table::
## strong::input:: || strong::output::
## 1, 1, 1 || 1
## 2, 2, 1 || 2
## 2, 2, 2 || 2
## 3, 3, 1 || 3
## 3, 3, 3 || 3
## 4, 4, 1 || 4
## 4, 4, 4 || 4
:: || Similar to the binary operator code::blend::, returns a linear mix of code::v, u:: with code::a:: between code::[0, 1]::. Supports piecewise blend or a single blend argument to apply to all components

## link::Classes/VDot::code::.pr(u, v):: || frame, shape, pixel || table::
## strong::input:: || strong::output::
## 1, 1 || 1
## 2, 2 || 1
## 3, 3 || 1
## 4, 4 || 1
:: || Returns the link::https://en.wikipedia.org/wiki/Dot_product##dot product:: between code::u:: and code::v::, or the sum of the product of each component in the vector

## link::Classes/VCross::code::.pr(u, v):: || frame, shape, pixel || table::
## strong::input:: || strong::output::
## 3, 3 || 3
:: || Returns the link::https://en.wikipedia.org/wiki/Cross_product##cross product:: of code::u:: and code::v::

## link::Classes/VNorm::code::.pr(v):: || frame, shape, pixel || table::
## strong::input:: || strong::output::
## 1, 1 || 1
## 2, 2 || 2
## 3, 3 || 3
## 4, 4 || 4
:: || Returns a emphasis::normalized:: vector parallel to code::v:: with length code::1::

::

subsection::Built-In Unary Operations

The SuperCollider UGens support a broad variety of unary, binary, and n-ary mathematical operations. These are typically expressed as operators within the link::Classes/SynthDef:: flow, and are transformed by the link::Classes/SynthDef:: programming into one of the subclasss of link::Classes/BasicOpUGen:: before being sent to the server. Scintillator implements parallel classes for unary and binary operations, with the link::Classes/BasicOpVGen:: as the base class and link::Classes/UnaryOpVGen:: and link::Classes/BinaryOpVGen:: derived classes handling a subset of the operators handled by the UGen programming.

For documentation of these operators in base SuperCollider see the link::Overviews/Operators:: overview or the link::Classes/SimpleNumber:: class documentation.

The following tables detail the current supported operations along with the ones that are not yet supported, the name of the VGen sent to the server to realize the operation, a brief explanation of their function and conceptual mathematical code. Since all numbers within a Scintillator link::Classes/ScinthDef:: must be floating-point, several of the integer operations like bit manipulation are marked as emphasis::not applicable::. If support is planned, but not yet implemented, the function is marked as emphasis::not yet implemented::.

For higher-dimensional signals all operations happen emphasis::piecewise::, meaning the operator is applied to each component of the signal independently. For example if code::b = a.neg:: and both code::a:: and code::b:: are link::Classes/VVec4:: objects then:

code::
b = VVec4.fr(
	VX.fr(a).neg,
	VY.fr(a).neg,
	VZ.fr(a).neg,
	VW.fr(a).neg);
::

note::
All unary operations are supported at all rates, support inputs in 1-4 dimensions, and produce outputs of the same dimension.
::

table::
## strong::Operator:: || strong::VGen:: || strong::Description:: || strong::conceptual sclang code::
## code::neg:: || code::VNeg:: || Unary negation || code::x = -1 * x::
## code::reciprocal:: || code::VReciprocal:: || Reciprocal division || code::x = 1 / x::
## code::bitNot:: || emphasis::not applicable:: || Bitwise inversion || emphasis::n/a::
## code::abs:: || code::VAbs:: || Absolute value || code::if (x < 0, { x.neg }, { x })::
## code::asFloat:: || emphasis::not applicable:: || Convert to float || emphasis::n/a::
## code::asInteger:: || emphasis::not applicable:: || Convert to integer || emphasis::n/a::
## code::ceil:: || code::VCeil:: || Nearest integer greater than x || code::if ((x - x.asInteger) > 0, { (x.asInteger) + 1.0 }, { x })::
## code::floor:: || code::VFloor:: || Nearest integer lesser than x || code::x.asInteger.asFloat::
## code::frac:: || code::VFract:: || Fractional remainder of x || code::x - x.asInteger::
## code::sign:: || code::VSign:: || Sign, either -1, 0, or +1 matching sign of x || code::case { x < 0 } { -1.0 } { x == 0 } { 0.0 } { 1.0 }::
## code::squared:: || converted to code::x * x:: || Square of a number || code::x * x::
## code::cubed:: || converted to code::x * x * x:: || Cube of a number || code::x * x * x::
## code::sqrt:: || code::VSqrt:: || Square root || code::x.sqrt::
## code::exp:: || code::VExp:: || Natural exponentiation || code::e ** x::
## code::midicps:: || emphasis::not yet implemented:: || MIDI note to cycles per second || emphasis::n/a::
## code::cpsmidi:: || emphasis::not yet implemented:: || Cycles per second to MIDI note || emphasis::n/a::
## code::midiratio:: || emphasis::not yet implemented:: || Convert an interval in MIDI notes to a frequency ratio || emphasis::n/a::
## code::ratiomidi:: || emphasis::not yet implemented:: || Convert a frequency ratio to an interval in MIDI notes || emphasis::n/a::
## code::ampdb:: || emphasis::not yet implemented:: || Convert decibels to linear amplitude || emphasis::n/a::
## code::dbamp:: || emphasis::not yet implemented:: || Convert linear amplitude to decibels || emphasis::n/a::
## code::octcps:: || emphasis::not yet implemented:: || Convert decimal octaves to cycles per second || emphasis::n/a::
## code::cpsoct:: || emphasis::not yet implemented:: || Convert cycles per second to decimal octaves || emphasis::n/a::
## code::log:: || code::VLog:: || Natural logarithm || code::x.log::
## code::log2:: || code::VLog2:: || Base 2 logarithm || code::x.log2::
## code::log10:: || emphasis::not yet implemented:: || Base 10 logarithm || emphasis::n/a::
## code::sin:: || code::VSin:: || Sine || code::x.sin::
## code::cos:: || code::VCos:: || Cosine || code::x.cos::
## code::tan:: || code::VTan:: || Tangent || code::x.tan::
## code::asin:: || code::VASin:: || Arcsine || code::x.asin::
## code::acos:: || code::VACos:: || Arccosine || code::x.acos::
## code::atan:: || code::VATan:: || Arctangent || code::x.atan::
## code::rand:: || emphasis::not yet implemented:: || Returns an evenly distributed random value between zero and x || code::x.rand::
## code::rand2:: || emphasis::not yet implemented:: || Returns an evenly distributed random value beteen -x and +x || code::x.rand2::
## code::linrand:: || emphasis::not yet implemented:: || Returns a linearly distributed random value between x and zero || code::x.linrand::
## code::bilinrand:: || emphasis::not yet implemented:: || Returns a linearly distributed random value between -x and +x || code::x.bilinrand::
## code::sum3rand:: || emphasis::not yet implemented:: || Returns a value from an approximation of a Gaussian random distribution between x and zero || code::x.sum3rand::
## code::distort:: || emphasis::not yet implemented:: || Nonlinear distortion of x || emphasis::n/a::
## code::softclip:: || emphasis::not yet implemented:: || Distortion with a linear region from 0.25 to 0.75 || emphasis::n/a::
## code::coin:: || emphasis::not yet implemented:: || Returns one or zero with the probability given by the argument || code::x.coin::
## code::even:: || emphasis::not applicable:: || True if dividable by two with no remainder || emphasis::n/a::
## code::odd:: || emphasis::not applicable:: || True if dividable by two with a remainder of 1 || emphasis::n/a::
## code::rectWindow:: || emphasis::not yet implemented:: || A value for a rectangular window function between 0 and 1 || emphasis::n/a::
## code::hanWindow:: || emphasis::not yet implemented:: || A value for a Hanning window function between 0 and 1 || emphasis::n/a::
## code::welWindow:: || emphasis::not yet implemented:: || A value for a Welsh window function between 0 and 1 || emphasis::n/a::
## code::triWindow:: || emphasis::not yet implemented:: || A value for a triangle window function between 0 and 1 || emphasis::n/a::
## code::scurve:: || emphasis::not yet implemented:: || Map x on to an S-curve || emphasis::n/a::
## code::ramp:: || emphasis::not yet implemented:: || Map receiver onto a ramp starting at 0 || emphasis::n/a::
## code::isPositive:: || emphasis::not applicable:: || True if x is >= 0 || emphasis::n/a::
## code::isNegative:: || emphasis::not applicable:: || True if x is < 0 || emphasis::n/a::
## code::isStrictlyPositive:: || emphasis::not applicable:: || True if x is > 0 || emphasis::n/a::
## code::rho:: || emphasis::not yet implemented:: || The polar radius of x || emphasis::n/a::
## code::theta:: || emphasis::not yet implemented:: || The polar angle of x || emphasis::n/a::
## code::ref:: || emphasis::unknown:: || To be researched what this operator does || emphasis::??::
::

subsection::Built-In Binary Operations

Binary operations also happen emphasis::piecewise::, meaning that the binary operator is applied to each individual component separately. Conceptually if code::c = a * b:: and both code::a:: and code::b:: are link::Classes/VVec4::s then:

code::
c = VVec4.fr(
	VX.fr(a) * VX.fr(b),
	VY.fr(a) * VY.fr(b),
	VZ.fr(a) * VZ.fr(b),
	VW.fr(a) * VW.fr(b));
::

table::
## strong::Operator:: || strong::VGen:: || strong::Description:: || strong::conceptual sclang code::
## code::rotate:: || emphasis::unknown:: || To be researched what this operator does || emphasis::??::
## code::dist:: || emphasis::unknown:: || To be researched what this opreator does || emphasis::??::
## code::+:: || code::VAdd:: || Addition || code::a + b::
## code::-:: || code::VSub:: || Subtraction || code::a - b::
## code::*:: || code::VMul:: || Multiplication || code::a * b::
## code::/:: || code::VDiv:: || Division || code::a / b::
## code::div:: || code::VDiv:: || Division, TODO: validate if this is really division || code::a / b::
## code::mod:: || code::VMod:: || Floating-point modulo || code::a % b::
## code::pow:: || code::VPow:: || Exponentiation || code::a ** b::
## code::min:: || code::VMin:: || Piecewise minimum || code::if (a < b, { a }, { b });::
## code::max:: || code::VMax:: || Piecewise maximum || code::if (a > b, { a }, { b });::
## code::<:: || emphasis::not applicable:: || True if a < b || emphasis::n/a::
## code::<=:: || emphasis::not applicable:: || True if a <= b || emphasis::n/a::
## code::>:: || emphasis::not applicable:: || True if a > b || emphasis::n/a::
## code::>=:: || emphasis::not applicable:: || True if a >= b || emphasis::n/a::
## code::bitAnd:: || emphasis::not applicable:: || Bitwise logical AND || emphasis::n/a::
## code::bitOr:: || emphasis::not applicable:: || Bitwise logical OR || emphasis::n/a::
## code::bitXor:: || emphasis::not applicable:: || Bitwise logical XOR || emphasis::n/a::
## code::hammingDistance:: || emphasis::not applicable:: || Count of bits that are different || emphasis::n/a::
## code::lcm:: || emphasis::not yet implemented:: || Least common multiple || emphasis::n/a::
## code::gcd:: || emphasis::not yet implemented:: || Greates common divisor || emphasis::n/a::
## code::round:: || emphasis::not yet implemented:: || Round to a multiple of a number || emphasis::n/a::
## code::roundUp:: || emphasis::not yet implemented:: || Round up to a multiple of a number || emphasis::n/a::
## code::trunc:: || emphasis::not yet implemented:: || Truncate to a muliple of a number || emphasis::n/a::
## code::atan2:: || code::VATan2:: || Arctangent of a / b || code::(a / b).atan::
## code::hypot:: || emphasis::not yet implemented:: || Square root of the sum of the squares || emphasis::n/a::
## code::hypotApx:: || emphasis::unknown:: || To be researched what this operator does || emphasis::??::
## code::leftShift:: || emphasis::not applicable:: || Shift bits to the left || emphasis::n/a::
## code::rightShift:: || emphasis::not applicable:: || Shift bits to the right || emphasis::n/a::
## code::unsignedRightShift:: || emphasis::not applicable:: || Shift bits to the right without preserving sign bit || emphasis::n/a::
## code::ring1:: || emphasis::not yet implemented:: || Ring modulation plus first source || code::(a * b) + a::
## code::ring2:: || emphasis::not yet implemented:: || Ring modulation plus both sources || code::(a * b) + a + b::
## code::ring3:: || emphasis::not yet implemented:: || Ring modulation variant || code::a * a * b::
## code::ring4:: || emphasis::not yet implemented:: || Ring modulation variant || code::(a * a * b) - (a * b * b)::
## code::difsqr:: || emphasis::not yet implemented:: || Difference of squares || code::(a * a) - (b * b)::
## code::sumsqr:: || emphasis::not yet implemented:: || Sum of the squares || code::(a**2) + (b**2)::
## code::sqrsum:: || emphasis::not yet implemented:: || Square of the sum || code::(a + b)**2::
## code::absdif:: || emphasis::not yet implemented:: || Absolute value of the difference || code::(a - b).abs::
## code::thresh:: || emphasis::not yet implemented:: || Thresholding || code::if (a < b, { 0 }, { a });::
## code::amclip:: || emphasis::not yet implemented:: || Two quadrant multiply || code::if (b <= 0, { 0 }, { a * b });::
## code::scaleneg:: || emphasis::not yet implemented:: || Scale negative part of input || code::if (a < 0, { a * b }, { a });::
## code::clip2:: || emphasis::not yet implemented:: || Clip code::a:: to code::+/-b:: || code::if (a.abs < b, { b * a.sign }, { a });::
## code::fold2:: || emphasis::not yet implemented:: || Bilateral folding || emphasis::n/a::
## code::wrap2:: || emphasis::not yet implemented:: || Bilateral wrapping || emphasis::n/a::
## code::excesss:: || emphasis::not yet implemented:: || Residual clipping || emphasis::n/a::
## code::firstArg:: || emphasis::unknown:: || To be researched what this operator does || emphasis::??::
## code::rrand:: || emphasis::not yet implemented:: || Generate a uniformly distributed pseudorandom number in [a, b] || emphasis::n/a::
## code::exprand:: || emphasis::not yet implemented:: || Generate an exponentially distributed pseudorandom number in [a, b] || emphasis::n/a::
## code::@:: || emphasis::unknown:: || To be researched what this operator does || emphasis::??::
## code::||:: || emphasis::not applicable:: || Boolean logical OR || emphasis::n/a::
## code::&&:: || emphasis::not applicable:: || Boolean logical AND || emphasis::n/a::
## code::xor:: || emphasis::not applicable:: || Boolean logical XOR || emphasis::n/a::
## code::nand:: || emphasis::not applicable:: || Boolean logical NAND || emphasis::n/a::
::