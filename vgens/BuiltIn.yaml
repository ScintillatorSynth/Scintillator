# VGens that wrap GLSL built-in functions or variables. This is not an exhaustive list, adding things as needed.
---
name: VDistance
rates: [ frame, shape, pixel ]
inputs: [ u, v ]
outputs: [ out ]
dimensions:
    - inputs: 1
      outputs: 1
    - inputs: 2
      outputs: 1
    - inputs: 3
      outputs: 1
    - inputs: 4
      outputs: 1
shader: "@out = distance(@u, @v);"
---
name: VDot
rates: [ frame, shape, pixel ]
inputs: [ v, u ]
outputs: [ out ]
dimensions:
    - inputs: 1
      outputs: 1
    - inputs: 2
      outputs: 1
    - inputs: 3
      outputs: 1
    - inputs: 4
      outputs: 1
shader: "@out = dot(@v, @u);"
---
name: VClamp
rates: [ frame, shape, pixel ]
inputs: [ v, min, max ]
outputs: [ out ]
dimensions:
    - inputs: 1
      outputs: 1
    - inputs: 2
      outputs: 2
    - inputs: 3
      outputs: 3
    - inputs: 4
      outputs: 4
shader: "@out = clamp(@v, @min, @max);"
---
name: VCross
rates: [ frame, shape, pixel ]
inputs: [ u, v ]
outputs: [ out ]
dimensions:
    - inputs: 3
      outputs: 3
shader: "@out = cross(@u, @v);"
---
name: VFragCoord
rates: [ frame, shape, pixel ]
outputs: [ out ]
dimensions:
    - outputs: 2
shader: "@out = vec2(@vFragCoord.x, @vFragCoord.y);"
---
name: VLength
rates: [ frame, shape, pixel ]
inputs: [ v ]
outputs: [ out ]
dimensions:
    - inputs: 1
      outputs: 1
    - inputs: 2
      outputs: 1
    - inputs: 3
      outputs: 1
    - inputs: 4
      outputs: 1
shader: "@out = length(@v);"
---
name: VStep
rates: [ frame, shape, pixel ]
inputs: [ edge, v ]
outputs: [ out ]
dimensions:
    - inputs: 1
      outputs: 1
    - inputs: 2
      outputs: 2
    - inputs: 3
      outputs: 3
    - inputs: 4
      outputs: 4
shader: "@out = step(@edge, @v);"
---
name: VTextureSize
rates: [ frame, shape, pixel ]
sampler: true
outputs: [ out ]
dimensions:
    - outputs: 2
shader: "@out = vec2(textureSize(@sampler, 0));"
---
name: VMix
rates: [ frame, shape, pixel ]
inputs: [ v, u, a ]
outputs: [ out ]
dimensions:
    - inputs: 1
      outputs: 1
    - inputs: 2
      outputs: 2
    - inputs: 3
      outputs: 3
      inputs: 4
      outputs: 4
    - inputs: [2, 2, 1]
      outputs: 2
    - inputs: [3, 3, 1]
      outputs: 3
    - inputs: [4, 4, 1]
      outputs: 4
shader: "@out = mix(@v, @u, @a);"
---
name: VNorm
rates: [ frame, shape, pixel ]
inputs: [ v ]
outputs: [ out ]
dimensions:
    - inputs: 1
      outputs: 1
    - inputs: 2
      outputs: 2
    - inputs: 3
      outputs: 3
    - inputs: 4
      outputs: 4
shader: "@out = normalize(@v);"
