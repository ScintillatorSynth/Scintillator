#!/bin/bash

# Custom AppRun script needed to set up Vulkan Loader environment variables, needed to load the validation layers and
# SwiftShader from inside the AppImage directory.

HERE="$(dirname "$(readlink -f "${0}")")"

cd $HERE

### This section copied verbatim from https://github.com/darealshinji/AppImageKit-checkrt/blob/master/AppRun.sh, used
# to inject a newer libstdc++ for binaries only inside this AppImage, and only on systems where the version in
# /usr/optional is newer than whats installed on the system.
cxxpre=""
gccpre=""
execpre=""
libc6arch="libc6,x86-64"
exec="./bin/$(sed -n 's|^Exec=||p' $(ls -1 *.desktop))"

if [ -n "$APPIMAGE" ] && [ "$(file -b "$APPIMAGE" | cut -d, -f2)" != " x86-64" ]; then
  libc6arch="libc6"
fi

cd usr

if [ -e "./optional/libstdc++/libstdc++.so.6" ]; then
  lib="$(PATH="/sbin:$PATH" ldconfig -p | grep "libstdc++\.so\.6 ($libc6arch)" | awk 'NR==1{print $NF}')"
  sym_sys=$(tr '\0' '\n' < "$lib" | grep -e '^GLIBCXX_3\.4' | tail -n1)
  sym_app=$(tr '\0' '\n' < "./optional/libstdc++/libstdc++.so.6" | grep -e '^GLIBCXX_3\.4' | tail -n1)
  if [ "$(printf "${sym_sys}\n${sym_app}"| sort -V | tail -1)" != "$sym_sys" ]; then
    cxxpath="./optional/libstdc++:"
  fi
fi

if [ -e "./optional/libgcc/libgcc_s.so.1" ]; then
  lib="$(PATH="/sbin:$PATH" ldconfig -p | grep "libgcc_s\.so\.1 ($libc6arch)" | awk 'NR==1{print $NF}')"
  sym_sys=$(tr '\0' '\n' < "$lib" | grep -e '^GCC_[0-9]\\.[0-9]' | tail -n1)
  sym_app=$(tr '\0' '\n' < "./optional/libgcc/libgcc_s.so.1" | grep -e '^GCC_[0-9]\\.[0-9]' | tail -n1)
  if [ "$(printf "${sym_sys}\n${sym_app}"| sort -V | tail -1)" != "$sym_sys" ]; then
    gccpath="./optional/libgcc:"
  fi
fi

if [ -n "$cxxpath" ] || [ -n "$gccpath" ]; then
  if [ -e "./optional/exec.so" ]; then
    execpre=""
    export LD_PRELOAD="./optional/exec.so:${LD_PRELOAD}"
  fi
  export LD_LIBRARY_PATH="${cxxpath}${gccpath}${LD_LIBRARY_PATH}"
fi

### End copied section.

# The Vulkan Loader will search a predefined list of hard-coded directories for device drivers, or will accept the path
# to a single device driver at provided at the VK_ICD_FILENAMES environment variable. So we scan the command line
# arguments for the swiftshader argument, and only hard-code the path to the swiftshader driver if it is requested.
if [[ "$*" == *swiftshader* ]]
then
    echo "Scintillator loader forcing Vulkan SwiftShader loader."
    export VK_ICD_FILENAMES=$HERE/usr/share/vulkan/icd.d/vk_swiftshader_icd.json
fi

# Like the driver search, the Vulkan loader will look for layers in a long list of hard-coded paths or a single
# user-defined path. Check for the presence of the vulkanValidation flag to force loading the Vulkan Validation Layers.
if [[ "$*" == *vulkanValidation* ]]
then
    echo "Scintillator loader forcing Vulkan Validation layers."
    export VK_LAYER_PATH=$HERE/usr/share/vulkan/explicit_layer.d
fi

if [[ "$*" == *crashpadHandlerPath* ]]
then
    echo "Respecting override for crashpad handler path"
    CRASHPAD_HANDLER=""
else
    CRASHPAD_HANDLER="--crashpadHandlerPath=$HERE/usr/bin/crashpad_handler"
fi

$exec $CRASHPAD_HANDLER $*
exit $?

